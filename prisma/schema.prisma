// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  actived       Boolean?    @default(true)
  password      String?
  cpf           String?     @db.VarChar(20)
  category      String?
  gender        UserGender?
  phone         String?
  birday        DateTime?   @db.Date
  completed     Boolean?    @default(false)
  shirtSize     String?
  level         Int?        @default(1)


  accounts Account[]
  sessions Session[]
  payments Payment[]

  profile              Profile?
  subscriptions        Subscription[]
  partnerSubscriptions Subscription[] @relation(name: "partnerSubscriptions")
  subscriptionCreated  Subscription[] @relation(name: "subscriptionCreatedUser")
  subscriptionUpdated  Subscription[] @relation(name: "subscriptionUpdatedUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime


  @@unique([identifier, token])
  @@map("verification_token")
}

model AppConfig {
  id      Int       @id @default(autoincrement())
  arenaId Int       @default(1)
  key     ConfigKey
  value   String    @db.LongText
  arena   Arena     @relation(fields: [arenaId], references: [id])

  @@unique([id, key])
  @@map("config")
}

model Profile {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map("profile")
}

model Arena {
  id          Int          @id @default(autoincrement())
  name        String
  description String?      @db.LongText
  published   Boolean      @default(true)
  tournaments Tournament[]

  AppConfig AppConfig[]
  @@map("arena")
}

model Tournament {
  id          Int      @id @default(autoincrement())
  arenaId     Int      @default(1)
  title       String
  description String?  @db.LongText
  expires     DateTime
  published   Boolean  @default(true)

  categories Category[]
  arena      Arena      @relation(fields: [arenaId], references: [id])

  @@map("tournaments")
}

model Category {
  id           Int      @id @default(autoincrement())
  tournamentId Int
  title        String
  description  String?  @db.LongText
  published    Boolean? @default(true)
  price        Float?   @default(0)

  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  subscriptions Subscription[]

  @@map("categories")
}

model Subscription {
  id         Int       @id @default(autoincrement())
  value      Float     @default(0)
  categoryId Int
  userId     String
  partnerId  String
  actived    Boolean?  @default(true)
  paid       Boolean?  @default(false)
  paymentId  Int?
  createdBy  String?
  createdAt  DateTime? @default(now()) @db.Timestamp(0)
  updatedBy  String?
  updatedAt  DateTime? @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  partner     User     @relation(name: "partnerSubscriptions", fields: [partnerId], references: [id])
  createdUser User?    @relation(name: "subscriptionCreatedUser", fields: [createdBy], references: [id])
  updatedUser User?    @relation(name: "subscriptionUpdatedUser", fields: [updatedBy], references: [id])
  payments    Payment? @relation(fields: [paymentId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])


  @@unique([categoryId, userId, partnerId, actived, createdBy], name: "uid_subscription")
  @@map(name: "subscriptions")
}

model Payment {
  id        Int           @id @default(autoincrement())
  uuid      String?       @unique(map: "uuid") @default(uuid()) @db.VarChar(64)
  method    PaymentMethod
  value     Float         @default(0.00)
  paid      Boolean       @default(false)
  payday    DateTime?     @db.DateTime(0)
  txid      String?       @db.VarChar(35)
  overdue   DateTime?     @db.Date
  createdBy String?
  createdAt DateTime?     @default(now()) @db.Timestamp(0)
  updatedBy String?
  updatedAt DateTime?     @db.DateTime(0)
  meta      String?       @db.LongText
  actived   Boolean       @default(true)
  userId    String


  subscriptions Subscription[]
  user          User           @relation(fields: [userId], references: [id])

  @@index([method], map: "method")
  @@index([paid], map: "paid")
  @@map("payments")
}

enum UserGender {
  F
  M
}

enum PaymentMethod {
  PIX
  CASH
}

enum ConfigKey {
  CERT_DEV
  CERT
  PIX
  OTHER
}
